# services/predictor.py
import os
import pickle
import numpy as np
from typing import Dict, List
from ..models.diet import Diet
from ..models.fatty_acid import AcidPrediction, PredictionResult

class LinearAcidPredictor:
    def __init__(self):
        self.ALL_ACIDS = self._discover_available_acids()

        project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        models_dir = os.path.join(project_root, 'app', 'models', 'linear_models')
        components_path = os.path.join(project_root, 'app', 'models', 'component_columns.pkl')
        
        print(f"–ò—â–µ–º –ª–∏–Ω–µ–π–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤: {models_dir}")
        
        self.acid_models: Dict[str, object] = {}
        
        try:
            with open(components_path, 'rb') as f:
                self.expected_components = pickle.load(f)
                
            for acid_name in self.ALL_ACIDS:
                model_path = os.path.join(models_dir, f'{acid_name}_model.pkl')
                if os.path.exists(model_path):
                    with open(model_path, 'rb') as f:
                        self.acid_models[acid_name] = pickle.load(f)
                    print(f"‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è {acid_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                else:
                    print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–ª—è {acid_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.acid_models)} –ª–∏–Ω–µ–π–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
            
            self._check_model_dimensions()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            self.acid_models = {}
            self.expected_components = []

    def _check_model_dimensions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ù–û–°–¢–ï–ô –ú–û–î–ï–õ–ï–ô:")
        for acid_name, model in self.acid_models.items():
            if hasattr(model, 'coef_'):
                expected_features = len(model.coef_)
                print(f"  {acid_name}: –æ–∂–∏–¥–∞–µ—Ç {expected_features} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            else:
                print(f"  {acid_name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å")

    def predict(self, diet: Diet) -> PredictionResult:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —É—Ä–æ–≤–Ω–∏ –≤—Å–µ—Ö –∫–∏—Å–ª–æ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ª–∏–Ω–µ–π–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        if not self.acid_models:
            return self._generate_fallback_prediction(diet)
        
        try:
            acid_predictions = {}
            
            for acid_name in self.ALL_ACIDS:
                if acid_name in self.acid_models:
                    model = self.acid_models[acid_name]
                    
                    features = self._diet_to_features_for_model(diet, model, acid_name)
                    
                    predicted_value = float(model.predict(features)[0])
                    
                    limits = self._get_acid_limits(acid_name)
                    
                    if predicted_value < limits['min']:
                        deviation = predicted_value - limits['min'] 
                    elif predicted_value > limits['max']:
                        deviation = predicted_value - limits['max']
                    else:
                        deviation = 0.0
                    
                    acid_predictions[acid_name] = AcidPrediction(
                        name=acid_name,
                        predicted_value=predicted_value,
                        target_min=limits['min'],
                        target_max=limits['max'],
                        deviation=deviation
                    )
                    print(f"‚úÖ {acid_name}: {predicted_value:.2f}%")
                    
                else:
                    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –¥–ª—è –∫–∏—Å–ª–æ—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                    acid_predictions[acid_name] = self._create_fallback_prediction(acid_name)
                    print(f"‚ö†Ô∏è –î–ª—è –∫–∏—Å–ª–æ—Ç—ã {acid_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ fallback –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
            
            return PredictionResult(acids=acid_predictions)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return self._generate_fallback_prediction(diet)
        
    def get_available_acids(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∏—Å–ª–æ—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –º–æ–¥–µ–ª–∏"""
        return list(self.acid_models.keys())

    def _diet_to_features_for_model(self, diet: Diet, model, acid_name: str) -> np.array:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Diet –≤ —Ñ–∏—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        features_order = [
            '—Ç—Ä–∞–≤_—Å–µ–Ω', '–∫–æ–Ω—Ü_–∑–µ—Ä–Ω', '–º–∞—Å–ª–∏—á–Ω', '–∂–∏—Ä', '–ø—Ä–æ–º_–æ—Ç—Ö', 
            '–º–∏–Ω_—Ç–µ—Ö–Ω–æ', '—Å–ø', '–∫—Ä–∞—Ö–º–∞–ª', 'andfom', '—Å–∞—Ö–∞—Ä (–≤—Ä—É)', 
            '–Ω–≤—É', '–æ–∂–∫', 'k'
        ]
        
        features = np.zeros(13)
        
        print(f"üîç –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è {acid_name}:")
        print(f"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —Ä–∞—Ü–∏–æ–Ω–µ: {list(diet.components.keys())}")
        
        for i, feature_name in enumerate(features_order):
            if feature_name in diet.components:
                amount = diet.components[feature_name].amount
                features[i] = amount
                print(f"   ‚úÖ {feature_name}: {amount:.2f}")
            else:
                print(f"   ‚ùå {feature_name}: 0.0")
        
        if hasattr(model, 'coef_'):
            expected_features = len(model.coef_)
            if expected_features < 13:
                features = features[:expected_features]
                print(f"üîß –û–±—Ä–µ–∑–∞–Ω–æ –¥–æ {expected_features} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏")
        
        print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä: {features}")
        return features.reshape(1, -1)
    def predict_single_acid(self, acid_name: str, diet: Diet) -> AcidPrediction:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∏—Å–ª–æ—Ç—ã"""
        if acid_name not in self.acid_models:
            return self._create_fallback_prediction(acid_name)
        
        try:
            model = self.acid_models[acid_name]
            features = self._diet_to_features_for_model(diet, model, acid_name)
            predicted_value = float(model.predict(features)[0])
            
            limits = self._get_acid_limits(acid_name)
            
            if predicted_value < limits['min']:
                deviation = predicted_value - limits['min'] 
            elif predicted_value > limits['max']:
                deviation = predicted_value - limits['max']
            else:
                deviation = 0.0
            
            return AcidPrediction(
                name=acid_name,
                predicted_value=predicted_value,
                target_min=limits['min'],
                target_max=limits['max'],
                deviation=deviation
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {acid_name}: {e}")
            return self._create_fallback_prediction(acid_name)
    def get_available_acids(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∏—Å–ª–æ—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –º–æ–¥–µ–ª–∏"""
        return list(self.acid_models.keys())

    def _get_acid_limits(self, acid_name: str) -> dict:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–µ–ª–æ–≤ –∫–∏—Å–ª–æ—Ç"""
        limits_dict = {
            '–ú–∞—Å–ª—è–Ω–∞—è': {'min': 2.4, 'max': 4.2},
            '–ö–∞–ø—Ä–æ–Ω–æ–≤–∞—è': {'min': 1.5, 'max': 3.0},
            '–ö–∞–ø—Ä–∏–ª–æ–≤–∞—è': {'min': 1.0, 'max': 2.0},
            '–ö–∞–ø—Ä–∏–Ω–æ–≤–∞—è': {'min': 2.0, 'max': 3.8},
            '–î–µ—Ü–µ–Ω–æ–≤–∞—è': {'min': 0.2, 'max': 0.4},
            '–õ–∞—É—Ä–∏–Ω–æ–≤–∞—è': {'min': 2.0, 'max': 4.4},
            '–ú–∏—Ä–∏—Å—Ç–∏–Ω–æ–≤–∞—è': {'min': 8.0, 'max': 13.0},
            '–ú–∏—Ä–∏—Å—Ç–æ–ª–µ–∏–Ω–æ–≤–∞—è': {'min': 0.6, 'max': 1.5},
            '–ü–∞–ª—å–º–∏—Ç–∏–Ω–æ–≤–∞—è': {'min': 21.0, 'max': 32.0},
            '–ü–∞–ª—å–º–∏—Ç–æ–ª–µ–∏–Ω–æ–≤–∞—è': {'min': 1.3, 'max': 2.4},
            '–°—Ç–µ–∞—Ä–∏–Ω–æ–≤–∞—è': {'min': 8.0, 'max': 13.5},
            '–û–ª–µ–∏–Ω–æ–≤–∞—è': {'min': 20.0, 'max': 28.0},
            '–õ–∏–Ω–æ–ª–µ–≤–∞—è': {'min': 2.2, 'max': 5.0},
            '–õ–∏–Ω–æ–ª–µ–Ω–æ–≤–∞—è': {'min': 0, 'max': 1.5},
            '–ê—Ä–∞—Ö–∏–Ω–æ–≤–∞—è': {'min': 0, 'max': 0.3},
            '–ë–µ–≥–µ–Ω–æ–≤–∞—è': {'min': 0, 'max': 0.1},
            '–ü—Ä–æ—á–∏–µ': {'min': 4.5, 'max': 6.5}
        }
        return limits_dict.get(acid_name, {'min': 0.0, 'max': 100.0})
    
    def _create_fallback_prediction(self, acid_name: str) -> AcidPrediction:
        """–°–æ–∑–¥–∞–µ—Ç fallback –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –∫–∏—Å–ª–æ—Ç—ã"""
        limits = self._get_acid_limits(acid_name)
        fallback_value = (limits['min'] + limits['max']) / 2
        
        return AcidPrediction(
            name=acid_name,
            predicted_value=fallback_value,
            target_min=limits['min'],
            target_max=limits['max'],
            deviation=0.0
        )
    
    def _generate_fallback_prediction(self, diet: Diet) -> PredictionResult:
        """–ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –µ—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å"""
        acid_predictions = {}
        
        for acid_name in self.ALL_ACIDS:
            acid_predictions[acid_name] = self._create_fallback_prediction(acid_name)
        
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ fallback –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∫–∏—Å–ª–æ—Ç")
        return PredictionResult(acids=acid_predictions)
    
    def test_prediction(self, diet: Diet) -> PredictionResult:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø (–õ–∏–Ω–µ–π–Ω—ã–µ –º–æ–¥–µ–ª–∏)")
        print("=" * 50)
        
        result = self.predict(diet)
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø:")
        for acid_name, prediction in result.acids.items():
            status = "‚úÖ –í –Ω–æ—Ä–º–µ" if prediction.is_within_target else "‚ùå –¢—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏"
            model_status = "‚úÖ –ú–æ–¥–µ–ª—å" if acid_name in self.acid_models else "‚ö†Ô∏è Fallback"
            print(f"   {acid_name}: {prediction.predicted_value:.2f}% ({status}) [{model_status}]")
            if not prediction.is_within_target:
                print(f"     –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {prediction.deviation:+.2f}%")
        
        return result
    def _discover_available_acids(self) -> List[str]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ –º–æ–¥–µ–ª–µ–π"""
        project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        models_dir = os.path.join(project_root, 'app', 'models', 'linear_models')
        
        if not os.path.exists(models_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {models_dir}")
            return []
        
        model_files = [f for f in os.listdir(models_dir) if f.endswith('_model.pkl')]
        
        acids = []
        for filename in model_files:
            acid_name = filename.replace('_model.pkl', '')
            acids.append(acid_name)
        
        print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∏—Å–ª–æ—Ç: {len(acids)}")
        for acid in acids:
            print(f"   - {acid}")
        
        return acids
AcidPredictor = LinearAcidPredictor