# services/recommender.py (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
from typing import List, Dict
from ..models.diet import Diet
from ..models.fatty_acid import PredictionResult
from .rec_manager import RecommendationManager
from .predictor import AcidPredictor


class DietRecommender:
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.recommendation_manager = RecommendationManager()
        self.predictor = AcidPredictor()
    
    def generate_recommendations(self, diet: Diet, 
                               prediction: PredictionResult) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        structured_recommendations = self.recommendation_manager.generate_recommendations(
            diet, prediction
        )
        
        return self._format_recommendations(structured_recommendations)
    
    def _format_recommendations(self, recommendations: List) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç"""
        if not recommendations:
            return ["‚úÖ –í—Å–µ –∂–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"]
        
        formatted = ["üìä –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ö–û–†–†–ï–ö–¶–ò–ò –†–ê–¶–ò–û–ù–ê:"]
        
        for i, rec in enumerate(recommendations, 1):
            # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            priority_emoji = {
                'critical': 'üî¥',
                'warning': 'üü°', 
                'info': 'üü¢'
            }.get(rec.priority.value, '‚ö™')
            
            formatted.append(f"\n{priority_emoji} –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è {i}: {rec.title}")
            formatted.append(f"   {rec.description}")
            
            for adj in rec.adjustments:
                change = adj.recommended_amount - adj.current_amount
                direction = "—É–≤–µ–ª–∏—á–∏—Ç—å" if change > 0 else "—É–º–µ–Ω—å—à–∏—Ç—å"
                formatted.append(
                    f"   ‚Ä¢ {direction} {adj.component_name} —Å {adj.current_amount:.1f} "
                    f"–¥–æ {adj.recommended_amount:.1f} –∫–≥"
                )
            
            # –û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
            for acid, impact in rec.expected_improvement.items():
                if impact != 0:
                    formatted.append(f"   ‚Üí {acid}: {impact:+.2f}%")
        
        formatted.append("\nüí° –ü—Ä–∏–º–µ–Ω–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑")
        return formatted
    
    def generate_structured_recommendations(self, diet: Diet, 
                                          prediction: PredictionResult):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–¥–ª—è –Ω–æ–≤–æ–≥–æ UI)"""
        return self.recommendation_manager.generate_recommendations(diet, prediction)
    
    def apply_and_evaluate_recommendation(self, diet: Diet, 
                                        recommendation) -> Dict:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        modified_diet = self.recommendation_manager.apply_recommendation(
            diet, recommendation
        )
        
        original_prediction = self.predictor.predict(diet)
        new_prediction = self.predictor.predict(modified_diet)
        
        impact = self.recommendation_manager.evaluate_recommendation_impact(
            diet, modified_diet, original_prediction, new_prediction
        )
        
        return {
            'modified_diet': modified_diet,
            'new_prediction': new_prediction,
            'impact_analysis': impact
        }