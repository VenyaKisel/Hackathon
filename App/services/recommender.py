# services/recommender.py
from typing import List, Dict
from ..models.diet import Diet
from ..models.fatty_acid import PredictionResult
from .rec_manager import RecommendationManager

class DietRecommender:
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–∞—Ü–∏–æ–Ω–∞ –∫–æ—Ä–æ–≤"""
    
    def __init__(self, acid_predictor=None): 
        if acid_predictor:
            self.acid_predictor = acid_predictor
        else:
            from .predictor import AcidPredictor
            self.acid_predictor = AcidPredictor()
            
        self.recommendation_manager = RecommendationManager(self.acid_predictor)
        print("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def generate_recommendations(self, diet: Diet, prediction: PredictionResult) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        try:
            structured_recommendations = self.recommendation_manager.generate_recommendations(diet, prediction)
            
            return self._format_recommendations(structured_recommendations, prediction)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return ["‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∑–∂–µ."]
    
    def _format_recommendations(self, recommendations: List, prediction: PredictionResult) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥"""
        if not recommendations:
            return self._get_no_recommendations_message(prediction)
        
        formatted = []
        
        problematic_count = self._count_problematic_acids(prediction)
        formatted.append(f"üìä –ê–ù–ê–õ–ò–ó –†–ê–¶–ò–û–ù–ê:")
        formatted.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {problematic_count}")
        
        problematic_acids = self._get_problematic_acids(prediction)
        if problematic_acids:
            formatted.append("\nüîç –ü–†–û–ë–õ–ï–ú–ù–´–ï –ö–ò–°–õ–û–¢–´:")
            for acid_name, acid_pred in problematic_acids:
                status = "–Ω–∏–∂–µ –Ω–æ—Ä–º—ã" if acid_pred.predicted_value < acid_pred.target_min else "–≤—ã—à–µ –Ω–æ—Ä–º—ã"
                formatted.append(
                    f"‚Ä¢ {acid_name}: {status} "
                    f"({acid_pred.predicted_value:.1f}% –ø—Ä–∏ –Ω–æ—Ä–º–µ {acid_pred.target_min:.1f}-{acid_pred.target_max:.1f}%)"
                )
        
        formatted.append("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for i, rec in enumerate(recommendations[:5], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            if rec.adjustments:
                adjustment = rec.adjustments[0]
                direction = "—É–≤–µ–ª–∏—á–∏—Ç—å" if adjustment.change_direction == 'increase' else "—É–º–µ–Ω—å—à–∏—Ç—å"
                formatted.append(
                    f"{i}. {direction} {adjustment.component_name} "
                    f"—Å {adjustment.current_amount:.1f}–∫–≥ –¥–æ {adjustment.recommended_amount:.1f}–∫–≥"
                )
        
        if len(recommendations) > 5:
            formatted.append(f"\n... –∏ –µ—â–µ {len(recommendations) - 5} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        return formatted
    
    def _get_no_recommendations_message(self, prediction: PredictionResult) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç"""
        problematic_count = self._count_problematic_acids(prediction)
        
        if problematic_count == 0:
            return ["‚úÖ –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ! –¢–µ–∫—É—â–∏–π —Ä–∞—Ü–∏–æ–Ω –æ–ø—Ç–∏–º–∞–ª–µ–Ω."]
        else:
            return [
                "üìä –ê–ù–ê–õ–ò–ó –†–ê–¶–ò–û–ù–ê:",
                f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {problematic_count}",
                "\nüí° –°–û–í–ï–¢:",
            ]
    
    def _count_problematic_acids(self, prediction: PredictionResult) -> int:
        """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏—Å–ª–æ—Ç –≤–Ω–µ —Ü–µ–ª–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
        return sum(1 for acid_pred in prediction.acids.values() if not acid_pred.is_within_target)
    
    def _get_problematic_acids(self, prediction: PredictionResult) -> List:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç"""
        return [
            (acid_name, acid_pred) 
            for acid_name, acid_pred in prediction.acids.items() 
            if not acid_pred.is_within_target
        ]