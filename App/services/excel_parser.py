import csv
import os
import re
import pandas as pd
from typing import Dict, Optional, List, Union, Tuple
from ..models.diet import Diet, DietComponent

class ExcelParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è CSV, Excel –∏ PDF —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Ü–∏–æ–Ω–∞–º–∏"""
    
    def parse_diet(self, file_path: str) -> Optional[Diet]:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω —Ä–∞—Ü–∏–æ–Ω –∏–∑ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π)"""
        try:            
            file_ext = os.path.splitext(file_path)[1].lower()
            
            if file_ext == '.csv':
                return self._parse_single_diet_from_csv(file_path)
            elif file_ext in ['.xlsx', '.xls']:
                csv_path = self._excel_to_csv(file_path)
                return self._parse_single_diet_from_csv(csv_path)
            elif file_ext == '.pdf':
                # –î–ª—è PDF –ø—ã—Ç–∞–µ–º—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤
                result = self._parse_pdf_single(file_path)
                if result:
                    return result
                else:
                    # Fallback: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
                    csv_path = self._pdf_to_csv(file_path)
                    if csv_path:
                        return self._parse_single_diet_from_csv(csv_path)
                    return None
            else:
                print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_ext}")
                return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def parse_all_diets(self, file_path: str) -> List[Diet]:
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ —Ä–∞—Ü–∏–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            file_ext = os.path.splitext(file_path)[1].lower()
            
            if file_ext == '.csv':
                return self._parse_all_diets_from_csv(file_path)
            elif file_ext in ['.xlsx', '.xls']:
                csv_path = self._excel_to_csv(file_path)
                return self._parse_all_diets_from_csv(csv_path)
            elif file_ext == '.pdf':
                return self._parse_pdf_all(file_path)
            else:
                print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_ext}")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö —Ä–∞—Ü–∏–æ–Ω–æ–≤ –∏–∑ {file_path}: {e}")
            return []
    
    def _parse_single_diet_from_csv(self, file_path: str) -> Optional[Diet]:
        """–ü–∞—Ä—Å–∏—Ç –ø–µ—Ä–≤—ã–π —Ä–∞—Ü–∏–æ–Ω –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8-sig') as file:
                reader = csv.DictReader(file)
                rows = list(reader)
                
                if not rows:
                    print("‚ÑπÔ∏è –§–∞–π–ª –ø—É—Å—Ç–æ–π")
                    return None
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                first_row = rows[0]
                ration_id = first_row.get('ration_id', '1')
                diet = self._create_diet_from_row(first_row, os.path.basename(file_path), ration_id)
                
                if diet and diet.components:
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Ä–∞—Ü–∏–æ–Ω —Å {len(diet.components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
                    return diet
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö")
                    return None
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV: {e}")
            return None
    
    def _parse_all_diets_from_csv(self, file_path: str) -> List[Diet]:
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ —Ä–∞—Ü–∏–æ–Ω—ã –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8-sig') as file:
                reader = csv.DictReader(file)
                rows = list(reader)
                
                if not rows:
                    print("‚ÑπÔ∏è –§–∞–π–ª –ø—É—Å—Ç–æ–π")
                    return []
                
                all_diets = []
                for i, row in enumerate(rows):
                    ration_id = row.get('ration_id', f'row_{i+1}')
                    diet = self._create_diet_from_row(row, os.path.basename(file_path), ration_id)
                    if diet and diet.components:
                        all_diets.append(diet)
                        print(f"‚úÖ –†–∞—Ü–∏–æ–Ω {ration_id}: {len(diet.components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
                
                print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ä–∞—Ü–∏–æ–Ω–æ–≤: {len(all_diets)}")
                return all_diets
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö —Ä–∞—Ü–∏–æ–Ω–æ–≤: {e}")
            return []
    
    def _parse_pdf_single(self, pdf_path: str) -> Optional[Diet]:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω —Ä–∞—Ü–∏–æ–Ω –∏–∑ PDF —Ñ–∞–π–ª–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
            result = self._parse_nds_pdf_format(pdf_path)
            if result:
                return result
            
            # Fallback –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã
            return self._parse_pdf_tables_fallback(pdf_path)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF {pdf_path}: {e}")
            return None

    def _parse_nds_pdf_format(self, pdf_path: str) -> Optional[Diet]:
        """–ü–∞—Ä—Å–∏—Ç NDS Professional —Ñ–æ—Ä–º–∞—Ç PDF"""
        try:
            import pdfplumber
            
            with pdfplumber.open(pdf_path) as pdf:
                full_text = ""
                for page in pdf.pages:
                    text = page.extract_text()
                    if text:
                        full_text += text + "\n"
                
                if not full_text:
                    return None
                
                # –ü–∞—Ä—Å–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
                components = self._extract_components_from_nds_text(full_text)
                
                if components:
                    return Diet(
                        diet_id=f"diet_{os.path.basename(pdf_path)}",
                        name=f"–†–∞—Ü–∏–æ–Ω –∏–∑ {os.path.basename(pdf_path)}",
                        components=components
                    )
                
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ NDS —Ñ–æ—Ä–º–∞—Ç–∞: {e}")
            return None

    def _extract_components_from_nds_text(self, text: str) -> Dict[str, DietComponent]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ NDS —Ñ–æ—Ä–º–∞—Ç–∞"""
        components = {}
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = text.split('\n')
        
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        start_index = -1
        for i, line in enumerate(lines):
            if '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã' in line:
                start_index = i
                break
        
        if start_index == -1:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤")
            return {}
        
        # –ü–∞—Ä—Å–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã - –∏—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        i = start_index + 1
        while i < len(lines):
            line = lines[i].strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
            if not line or any(keyword in line for keyword in ['–°–í %', '–ì–ü –∫–≥', '–°–í –∫–≥', '% –ì–ü', '% –°–í', '‚ÇΩ/Tonne']):
                i += 1
                continue
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
            ingredient_data = self._parse_ingredient_line(lines, i)
            if ingredient_data:
                name, amount = ingredient_data
                if name and amount > 0:
                    components[name] = DietComponent(name, amount)
                    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: {name} - {amount} –∫–≥")
                i += 7  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–∑–≤–∞–Ω–∏–µ + 6 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö)
            else:
                i += 1
        
        return components

    def _parse_ingredient_line(self, lines: List[str], start_idx: int) -> Optional[Tuple[str, float]]:
        """–ü–∞—Ä—Å–∏—Ç –±–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"""
        try:
            if start_idx + 6 >= len(lines):
                return None
            
            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
            name = lines[start_idx].strip()
            
            # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –°–í %, —Ç—Ä–µ—Ç—å—è - –ì–ü –∫–≥ (–Ω–∞–º –Ω—É–∂–Ω–∞ —ç—Ç–∞)
            amount_line = lines[start_idx + 2].strip()  # –ì–ü –∫–≥
            
            # –û—á–∏—â–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            amount_str = amount_line.replace(',', '.').replace(' ', '')
            amount = float(amount_str)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è (–¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏–ª–∏ –±—ã—Ç—å –∫–æ–¥–æ–º)
            if not self._is_valid_ingredient_name(name):
                return None
                
            return name, amount
            
        except (ValueError, IndexError, AttributeError):
            return None

    def _is_valid_ingredient_name(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"""
        if not name or len(name.strip()) < 2:
            return False
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —è–≤–Ω–æ –Ω–µ–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        excluded_keywords = ['–°–í %', '–ì–ü –∫–≥', '–°–í –∫–≥', '% –ì–ü', '% –°–í', '‚ÇΩ/Tonne', 
                           '–û–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è', '–°—Ç–æ–∏–º–æ—Å—Ç—å', '–ù—É—Ç—Ä–∏–µ–Ω—Ç', '–ï–¥–∏–Ω–∏—Ü–∞']
        
        if any(keyword in name for keyword in excluded_keywords):
            return False
        
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–∏–±–æ –±—É–∫–≤—ã, –ª–∏–±–æ –∫–æ–¥ –≤–∏–¥–∞ "XXXX.XX.XX.XX.XX"
        if re.match(r'^[–∞-—è–ê-–Øa-zA-Z]', name) or re.match(r'^\d+\.\d+\.\d+\.\d+\.\d+', name):
            return True
            
        return False

    def _parse_pdf_tables_fallback(self, pdf_path: str) -> Optional[Diet]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        try:
            import pdfplumber
            
            with pdfplumber.open(pdf_path) as pdf:
                for page in pdf.pages:
                    tables = page.extract_tables()
                    for table in tables:
                        if table and len(table) > 1:
                            diet = self._parse_nds_table(table)
                            if diet:
                                return diet
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF: {e}")
            return None

    def _parse_nds_table(self, table: List[List[str]]) -> Optional[Diet]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—É –≤ NDS —Ñ–æ—Ä–º–∞—Ç–µ"""
        components = {}
        
        for row in table:
            if len(row) >= 3 and row[0] and self._is_valid_ingredient_name(str(row[0])):
                try:
                    name = str(row[0]).strip()
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
                    amount = self._find_amount_in_row(row)
                    if amount > 0:
                        components[name] = DietComponent(name, amount)
                except (ValueError, TypeError):
                    continue
        
        if components:
            return Diet(
                diet_id="diet_from_table",
                name="–†–∞—Ü–∏–æ–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã",
                components=components
            )
        
        return None

    def _find_amount_in_row(self, row: List[str]) -> float:
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã"""
        for cell in row[1:4]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±—Ü—ã 1-3
            if cell:
                try:
                    amount_str = str(cell).replace(',', '.').replace(' ', '').strip()
                    return float(amount_str)
                except (ValueError, TypeError):
                    continue
        return 0.0

    def _parse_pdf_all(self, pdf_path: str) -> List[Diet]:
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ —Ä–∞—Ü–∏–æ–Ω—ã –∏–∑ PDF —Ñ–∞–π–ª–∞"""
        diet = self._parse_pdf_single(pdf_path)
        return [diet] if diet else []
    
    def _create_diet_from_row(self, data: Dict, source_name: str, ration_id: str) -> Diet:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Diet –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        diet_id = f"diet_{ration_id}"
        name = f"–†–∞—Ü–∏–æ–Ω {ration_id} –∏–∑ {source_name}"
        components = {}
        
        print(f"üìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞—Ü–∏–æ–Ω–∞ {ration_id}:")
        total_components = 0
        total_amount = 0.0
        
        for key, value in data.items():
            if key != 'ration_id' and key:
                try:
                    amount = float(value) if value and str(value).strip() else 0.0
                    if amount > 0:
                        components[key] = DietComponent(key, amount)
                        total_components += 1
                        total_amount += amount
                        print(f"  ‚úÖ {key}: {amount} –∫–≥")
                except (ValueError, TypeError):
                    print(f"  ‚ö†Ô∏è {key}: '{value}' (–Ω–µ —á–∏—Å–ª–æ)")
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ration_id {ration_id}:")
        print(f"   ‚Ä¢ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {total_components}")
        print(f"   ‚Ä¢ –û–±—â–∏–π –≤–µ—Å: {total_amount:.2f} –∫–≥")
        
        return Diet(
            diet_id=str(diet_id),
            name=str(name),
            components=components,
        )
    
    def _excel_to_csv(self, excel_file_path: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Excel –≤ CSV"""
        csv_file_path = excel_file_path.replace('.xlsx', '.csv').replace('.xls', '.csv')
        df = pd.read_excel(excel_file_path)
        df.to_csv(csv_file_path, index=False, encoding='utf-8')
        print(f"‚úÖ Excel —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: {csv_file_path}")
        return csv_file_path
    
    def _pdf_to_csv(self, pdf_file_path: str) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PDF –≤ CSV (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)"""
        try:
            import pdfplumber
            
            csv_file_path = pdf_file_path.replace('.pdf', '_converted.csv')
            
            print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ CSV...")
            
            with pdfplumber.open(pdf_file_path) as pdf:
                all_tables = []
                
                for page in pdf.pages:
                    tables = page.extract_tables()
                    for table in tables:
                        if table and len(table) > 1:
                            all_tables.extend(table)
                
                if all_tables:
                    with open(csv_file_path, 'w', encoding='utf-8', newline='') as f:
                        writer = csv.writer(f)
                        writer.writerows(all_tables)
                    
                    print(f"‚úÖ PDF —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: {csv_file_path}")
                    return csv_file_path
                else:
                    print("‚ùå –í PDF –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                    return None
                    
        except ImportError:
            print("‚ùå –î–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pdfplumber")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF: {e}")
            return None

    def parse_pdf_directories(self, root_directories, output_dir=None) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç PDF —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤–∫–ª—é—á–∞—è NDS —Ñ–æ—Ä–º–∞—Ç"""
        results = {
            'diets': [],
            'statistics': {
                'total_files': 0,
                'successful_parses': 0,
                'failed_parses': 0
            }
        }
        
        try:
            for root_dir in root_directories:
                for file_path in self._find_pdf_files(root_dir):
                    results['statistics']['total_files'] += 1
                    
                    diet = self._parse_pdf_single(file_path)
                    if diet:
                        results['diets'].append(diet)
                        results['statistics']['successful_parses'] += 1
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {os.path.basename(file_path)}")
                    else:
                        results['statistics']['failed_parses'] += 1
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: {os.path.basename(file_path)}")
            
            return results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")
            return results

    def _find_pdf_files(self, directory: str) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ PDF —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        pdf_files = []
        for root, _, files in os.walk(directory):
            for file in files:
                if file.lower().endswith('.pdf'):
                    pdf_files.append(os.path.join(root, file))
        return pdf_files