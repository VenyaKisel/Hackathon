import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import os
from typing import Optional, List

from ..models.diet import Diet
from ..services.predictor import AcidPredictor
from ..services.recommender import DietRecommender
from .widgets.diet_editor import DietEditor
from .widgets.acid_predictions import AcidPredictionDisplay
from .widgets.recommendations import RecommendationsDisplay
from ..services.excel_parser import ExcelParser


class DietPredictionView:
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Ü–∏–æ–Ω–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, parent, app, main_window):
        self.app = app
        self.main_window = main_window
        
        self.current_diets = [] 
        self.current_diet = None 
        
        self.predictor = AcidPredictor()
        self.recommender = DietRecommender(self.predictor)
        
        self.frame = ttk.Frame(parent, padding="10")
        self.editor_visible = True 
        self.create_widgets()
        
        self._test_model_loading()

    def _test_model_loading(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–µ–π –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å"""
        if hasattr(self.predictor, 'acid_models') and self.predictor.acid_models:
            print("‚úÖ –õ–∏–Ω–µ–π–Ω—ã–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∏—Å–ª–æ—Ç: {len(self.predictor.acid_models)}")
            print(f"üìä –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {len(self.predictor.expected_components)}")
            
            print("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∏—Å–ª–æ—Ç:")
            for i, acid_name in enumerate(self.predictor.acid_models.keys()):
                print(f"  {i+1}. {acid_name}")

            print("–ü–µ—Ä–≤—ã–µ 10 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–∏:")
            for i, comp in enumerate(self.predictor.expected_components[:10]):
                print(f"  {i+1}. {comp}")
        else:
            print("‚ùå –õ–∏–Ω–µ–π–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è fallback –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            if hasattr(self.predictor, 'acid_models'):
                print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(self.predictor.acid_models)}")

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–∫–∏"""
        main_container = ttk.Frame(self.frame)
        main_container.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        self.frame.columnconfigure(0, weight=1)
        self.frame.rowconfigure(0, weight=1)
        
        main_container.columnconfigure(0, weight=1)
        for i in range(8):
            main_container.rowconfigure(i, weight=0)
        main_container.rowconfigure(6, weight=1)
        main_container.rowconfigure(7, weight=1)
        
        title_label = ttk.Label(main_container,
                               text="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏—Ä–Ω–æ–∫–∏—Å–ª–æ—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –º–æ–ª–æ–∫–∞",
                               font=('Arial', 14, 'bold'))
        title_label.grid(row=0, column=0, pady=(0, 20), sticky=tk.W)
        
        self.create_file_section(main_container, row=1)
        self.create_diet_selection_section(main_container, row=2)
        
        self.diet_editor = DietEditor(main_container, self)
        self.diet_editor.frame.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(10, 0))        
        self.create_editor_control_section(main_container, row=4)
        
        ttk.Button(main_container, 
                  text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑",
                  command=self.calculate_prediction,
                  style='Accent.TButton').grid(row=5, column=0, pady=20)
        
        self.prediction_display = AcidPredictionDisplay(main_container, self)
        self.prediction_display.frame.grid(row=6, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        self.recommendations_display = RecommendationsDisplay(main_container, self)
        self.recommendations_display.frame.grid(row=7, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
    def create_editor_control_section(self, parent, row: int):
        """–°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        control_frame = ttk.Frame(parent)
        control_frame.grid(row=row, column=0, sticky=(tk.W, tk.E), pady=(5, 10))
        control_frame.columnconfigure(0, weight=1)
        
        self.toggle_editor_btn = ttk.Button(
            control_frame,
            text="‚ñ≤ –°–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞—Ü–∏–æ–Ω–∞",
            command=self.toggle_editor_visibility
        )
        self.toggle_editor_btn.grid(row=0, column=0, sticky=tk.W)
        
    def toggle_editor_visibility(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ä–∞—Ü–∏–æ–Ω–∞"""
        if self.editor_visible:
            self.diet_editor.frame.grid_remove()
            self.toggle_editor_btn.config(text="‚ñº –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞—Ü–∏–æ–Ω–∞")
            self.editor_visible = False
        else:
            self.diet_editor.frame.grid()
            self.toggle_editor_btn.config(text="‚ñ≤ –°–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞—Ü–∏–æ–Ω–∞")
            self.editor_visible = True
        
    def create_file_section(self, parent, row: int):
        """–°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Ä–∞—Ü–∏–æ–Ω–∞"""
        file_frame = ttk.LabelFrame(parent, text="–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Ü–∏–æ–Ω–∞", padding="10")
        file_frame.grid(row=row, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        file_frame.columnconfigure(1, weight=1)
        
        ttk.Button(file_frame, 
                text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω (PDF/Excel/CSV)",
                command=self.load_diet_file).grid(row=0, column=0, padx=(0, 10), sticky=tk.W)
        
        ttk.Button(file_frame, 
                text="–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Å —Ä–∞—Ü–∏–æ–Ω–∞–º–∏",
                command=self.load_all_diets).grid(row=0, column=1, padx=(0, 10), sticky=tk.W)
        
        ttk.Button(file_frame,
                text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Ü–∏–æ–Ω",
                command=self.create_new_diet).grid(row=0, column=2, padx=(0, 10), sticky=tk.W)
        
        self.file_status_label = ttk.Label(file_frame, text="–†–∞—Ü–∏–æ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", foreground='gray')
        self.file_status_label.grid(row=1, column=0, columnspan=3, sticky=tk.W, pady=(10, 0))
    
    def create_diet_selection_section(self, parent, row: int):
        """–°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Ü–∏–æ–Ω–∞"""
        selection_frame = ttk.LabelFrame(parent, text="–í—ã–±–æ—Ä —Ä–∞—Ü–∏–æ–Ω–∞", padding="10")
        selection_frame.grid(row=row, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        selection_frame.columnconfigure(1, weight=1)
        
        ttk.Label(selection_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Ü–∏–æ–Ω:").grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        
        self.diet_combobox = ttk.Combobox(selection_frame, state="readonly", width=30)
        self.diet_combobox.grid(row=0, column=1, sticky=(tk.W, tk.E))
        self.diet_combobox.bind('<<ComboboxSelected>>', self.on_diet_selected)
        
        ttk.Button(selection_frame,
                  text="–û–±–Ω–æ–≤–∏—Ç—å",
                  command=self.update_diet_combobox).grid(row=0, column=2, padx=(10, 0))
    
    def on_diet_selected(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Ü–∏–æ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        selected_index = self.diet_combobox.current()
        if 0 <= selected_index < len(self.current_diets):
            selected_diet = self.current_diets[selected_index]
            self.set_current_diet(selected_diet)
            self.update_diet_display()
            self.file_status_label.config(text=f"–í—ã–±—Ä–∞–Ω: {selected_diet.diet_id}")
            
    def update_diet_combobox(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å —Ä–∞—Ü–∏–æ–Ω–∞–º–∏"""
        diet_names = [diet.name for diet in self.current_diets]
        self.diet_combobox['values'] = diet_names
        
        if self.current_diet and self.current_diet in self.current_diets:
            current_index = self.current_diets.index(self.current_diet)
            self.diet_combobox.current(current_index)
        elif self.current_diets:
            self.diet_combobox.current(0)
    
    def load_all_diets(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ä–∞—Ü–∏–æ–Ω—ã –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        try:
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª —Å —Ä–∞—Ü–∏–æ–Ω–∞–º–∏",
                filetypes=[("CSV files", "*.csv"), ("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
            )
            
            if not file_path:
                return
                
            print(f"\nüîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–∞—Ü–∏–æ–Ω–æ–≤ –∏–∑: {file_path}")
            
            parser = ExcelParser()
            all_diets = parser.parse_all_diets(file_path)
            
            if all_diets:
                self.current_diets = all_diets  # –ó–∞–º–µ–Ω—è–µ–º, –∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
                if all_diets:
                    self.set_current_diet(all_diets[0])
                
                self.update_diet_combobox()
                self.update_diet_display()
                self.file_status_label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Ü–∏–æ–Ω–æ–≤: {len(all_diets)}")
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_diets)} —Ä–∞—Ü–∏–æ–Ω–æ–≤")
            else:
                self.file_status_label.config(text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ä–∞—Ü–∏–æ–Ω–æ–≤: {e}"
            print(f"‚ùå {error_msg}")
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
    
    def load_diet_file(self) -> Optional[Diet]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω"""
        try:
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Ü–∏–æ–Ω–æ–º",
                filetypes=[
                    ("–í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã", "*.pdf *.csv *.xlsx *.xls"),
                    ("PDF files", "*.pdf"),
                    ("Excel files", "*.xlsx *.xls"),
                    ("CSV files", "*.csv"),
                    ("All files", "*.*")
                ]
            )
            
            if not file_path:
                return None
                
            parser = ExcelParser()            
            diet = parser.parse_diet(file_path)
            
            if diet:
                file_name = os.path.basename(file_path)
                diet.name = f"–†–∞—Ü–∏–æ–Ω –∏–∑ {file_name}"
                self.current_diets.append(diet)
                self.set_current_diet(diet)
            
                self.update_diet_combobox()
                self.update_diet_display()
                self.file_status_label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω: {file_name}")
                self.print_current_diet_info()
                return diet
            else:
                self.file_status_label.config(text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
                return None
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}"
            print(f"‚ùå {error_msg}")
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            return None
    
    def create_new_diet(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É—Å—Ç–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞"""
        from ..models.diet import DietComponent 
        
        new_diet = Diet(
            diet_id=f"diet_{len(self.current_diets) + 1}",
            name=f"–ù–æ–≤—ã–π —Ä–∞—Ü–∏–æ–Ω {len(self.current_diets) + 1}",
            components={}
        )
        self.current_diets.append(new_diet)
        self.set_current_diet(new_diet)
        self.update_diet_combobox()
        self.update_diet_display()
        self.file_status_label.config(text="–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–∞—Ü–∏–æ–Ω")
        
    def set_current_diet(self, diet: Diet):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞—Ü–∏–æ–Ω"""
        self.current_diet = diet
        if hasattr(self, 'diet_editor'):
            self.diet_editor.load_diet(diet)
        
    def update_diet_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Ü–∏–æ–Ω–∞"""
        if self.current_diet and hasattr(self, 'diet_editor'):
            self.diet_editor.load_diet(self.current_diet)
            
    def calculate_prediction(self):
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞"""
        if not self.current_diet:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Ü–∏–æ–Ω")
            return
            
        try:
            if hasattr(self.main_window, 'set_status'):
                self.main_window.set_status("–†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞...")
            
            prediction_result = self.predictor.predict(self.current_diet)
            
            recommendations = self.recommender.generate_recommendations(
                self.current_diet, prediction_result)
                
            self.prediction_display.show_prediction(prediction_result)
            self.recommendations_display.show_recommendations(recommendations)
            
            if hasattr(self.main_window, 'set_status'):
                self.main_window.set_status("–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}"
            print(f"‚ùå {error_msg}")
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            
    def print_current_diet_info(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ä–∞—Ü–∏–æ–Ω–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª"""
        if not self.current_diet:
            print("–¢–µ–∫—É—â–∏–π —Ä–∞—Ü–∏–æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
            
        diet = self.current_diet
        print("\n" + "="*60)
        print(f"ID: {diet.diet_id}")
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {diet.name}")
        print("\n–ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–¶–ò–û–ù–ê:")
        
        if diet.components:
            sorted_components = sorted(diet.components.items(), key=lambda x: x[0])
            for comp_name, component in sorted_components:
                print(f"   ‚Ä¢ {comp_name}: {component.amount} –∫–≥")
        else:
            print("   ‚Ä¢ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print("="*60)
        
    def update_diet_component(self, component_name: str, new_value: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ä–∞—Ü–∏–æ–Ω–∞"""
        from ..models.diet import DietComponent  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
        
        if self.current_diet:
            if component_name in self.current_diet.components:
                self.current_diet.components[component_name].amount = new_value
            else:
                self.current_diet.components[component_name] = DietComponent(component_name, new_value)