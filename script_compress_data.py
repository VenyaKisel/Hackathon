import pandas as pd
import re

def compress_rations_to_13_features(csv_path: str, output_path: str = None) -> pd.DataFrame:

    df = pd.read_csv(csv_path)
    
    def map_component(component_name: str) -> str:
        """–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç CSV —Å –ø—Ä–∏–∑–Ω–∞–∫–æ–º –º–æ–¥–µ–ª–∏"""
        comp_lower = component_name.lower().strip()
        
        # 1. —Ç—Ä–∞–≤_—Å–µ–Ω - —Ç—Ä–∞–≤—è–Ω–æ–µ —Å–µ–Ω–æ
        if any(word in comp_lower for word in ['—Å–µ–Ω–æ', '–ª—é—Ü–µ—Ä–Ω–∞', '—Å—É–¥–∞–Ω–∫–∞', '—Ç–∏–º–æ—Ñ–µ–µ–≤–∫–∞', '–∫–ª–µ–≤–µ—Ä']):
            return '—Ç—Ä–∞–≤_—Å–µ–Ω'
        
        elif any(word in comp_lower for word in ['–∫—É–∫—É—Ä—É–∑–∞', '—è—á–º–µ–Ω—å', '–ø—à–µ–Ω–∏—Ü–∞', '—Ä–æ–∂—å', '—Ç—Ä–∏—Ç–∏–∫–∞–ª–µ', 
                                               '–∑–µ—Ä–Ω–æ—Å–º–µ—Å—å', '–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç', '–∫–æ–º–±–∏–∫–æ—Ä–º', '—Ñ—É—Ä–∞–∂']):
            return '–∫–æ–Ω—Ü_–∑–µ—Ä–Ω'
        
        elif any(word in comp_lower for word in ['—à—Ä–æ—Ç', '–∂–º—ã—Ö', '—Å–æ–µ–≤', '—Ä–∞–ø—Å', '–ª—å–Ω—è–Ω', '–ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω']):
            return '–º–∞—Å–ª–∏—á–Ω'
        
        elif '–∂–∏—Ä' in comp_lower:
            return '–∂–∏—Ä'
        
        elif any(word in comp_lower for word in ['–∂–æ–º', '–ø–∞—Ç–æ–∫–∞', '–¥—Ä–æ–±–∏–Ω–∞', '–¥—Ä–æ–∂–∂', '–ø–∏–≤–Ω']):
            return '–ø—Ä–æ–º_–æ—Ç—Ö'
        
        elif any(word in comp_lower for word in ['–ø—Ä–µ–º–∏–∫—Å', '—Å–æ–¥–∞', '—Å–æ–ª—å', '–ø–æ—Ç–∞—à', '–º–µ–ª', '–∫–∞–ª—å—Ü–∏–π']):
            return '–º–∏–Ω_—Ç–µ—Ö–Ω–æ'
        
        elif '–ø–∞—Ç–æ–∫–∞' in comp_lower:
            return '—Å–ø'
        
        elif any(word in comp_lower for word in ['–∫—É–∫—É—Ä—É–∑–∞', '—è—á–º–µ–Ω—å', '–ø—à–µ–Ω–∏—Ü–∞', '–∫—Ä–∞—Ö–º–∞–ª']):
            return '–∫—Ä–∞—Ö–º–∞–ª'
        
        elif any(word in comp_lower for word in ['—Å–∏–ª–æ—Å', '—Å–µ–Ω–∞–∂', '–∫–æ—Ä–Ω–∞–∂', '—Å–æ–ª–æ–º–∞', '—Å–µ–Ω–æ']):
            return 'andfom'
        
        elif '–ø–∞—Ç–æ–∫–∞' in comp_lower or '—Å–∞—Ö–∞—Ä' in comp_lower:
            return '—Å–∞—Ö–∞—Ä (–≤—Ä—É)'

        elif '–ø–æ—Ç–∞—à' in comp_lower:
            return 'k'
        
        else:
            return '–¥—Ä—É–≥–æ–µ'
    
    features_columns = [
        '—Ç—Ä–∞–≤_—Å–µ–Ω', '–∫–æ–Ω—Ü_–∑–µ—Ä–Ω', '–º–∞—Å–ª–∏—á–Ω', '–∂–∏—Ä', '–ø—Ä–æ–º_–æ—Ç—Ö', 
        '–º–∏–Ω_—Ç–µ—Ö–Ω–æ', '—Å–ø', '–∫—Ä–∞—Ö–º–∞–ª', 'andfom', '—Å–∞—Ö–∞—Ä (–≤—Ä—É)', 
        '–Ω–≤—É', '–æ–∂–∫', 'k'
    ]
    
    result_df = pd.DataFrame()
    result_df['ration_id'] = df['ration_id']
    
    for feature in features_columns:
        result_df[feature] = 0.0
    
    component_columns = [col for col in df.columns if col != 'ration_id']
    
    print("üîç –ü–†–û–¶–ï–°–° –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø:")
    mapping_stats = {}
    
    for component in component_columns:
        feature = map_component(component)
        
        if feature not in mapping_stats:
            mapping_stats[feature] = []
        mapping_stats[feature].append(component)
        
        if feature in features_columns:
            result_df[feature] += df[component].fillna(0)
    
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø:")
    for feature, components in mapping_stats.items():
        print(f"   {feature}: {len(components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        for comp in components[:3]: 
            print(f"     - {comp}")
        if len(components) > 3:
            print(f"     ... –∏ –µ—â–µ {len(components) - 3}")
    
    if output_path:
        result_df.to_csv(output_path, index=False)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_path}")
    
    print(f"\n‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(component_columns)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    print(f"‚úÖ –°–∂–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ: 13 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞—Ü–∏–æ–Ω–æ–≤: {len(result_df)}")
    
    return result_df

def analyze_compressed_features(compressed_df: pd.DataFrame):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–∂–∞—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìà –ê–ù–ê–õ–ò–ó –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–†–ò–ó–ù–ê–ö–û–í:")
    
    features_columns = [
        '—Ç—Ä–∞–≤_—Å–µ–Ω', '–∫–æ–Ω—Ü_–∑–µ—Ä–Ω', '–º–∞—Å–ª–∏—á–Ω', '–∂–∏—Ä', '–ø—Ä–æ–º_–æ—Ç—Ö', 
        '–º–∏–Ω_—Ç–µ—Ö–Ω–æ', '—Å–ø', '–∫—Ä–∞—Ö–º–∞–ª', 'andfom', '—Å–∞—Ö–∞—Ä (–≤—Ä—É)', 
        '–Ω–≤—É', '–æ–∂–∫', 'k'
    ]
    
    for feature in features_columns:
        non_zero = (compressed_df[feature] > 0).sum()
        total = len(compressed_df)
        percentage = (non_zero / total) * 100
        avg_value = compressed_df[feature].mean()
        max_value = compressed_df[feature].max()
        
        print(f"   {feature}:")
        print(f"     –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {non_zero}/{total} ({percentage:.1f}%)")
        print(f"     –°—Ä–µ–¥–Ω–µ–µ: {avg_value:.2f}, –ú–∞–∫—Å–∏–º—É–º: {max_value:.2f}")
